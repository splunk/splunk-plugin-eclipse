<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright 2013 Splunk, Inc.

Licensed under the Apache License, Version 2.0 (the &quot;License&quot;): you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.
-->

<templates>

<!--
These are the templates that will appear in suggested completions in various
Java contexts. For those adding new templates, the attributes of template are:

* name: The text the user types to specify the template.
* description: A human readable description showed in the autocomplete menu.
* id: A unique identifier for this template in Eclipse
  (typically com.splunk.sdk.java.templates.nameoftemplate)
* context: The context in which this template will be suggested. The available
  values are java (always show when editing Java files), java-members (show
  when in at a point where only a class member makes sense), and
  java-statements (show only when in a method where you are writing 
  Java statements).
* enabled: Use "true" if you want the template to be available.
* autoinsert: Use "true". 

Here is a blank template to start with (replace the parts in square brackets):

<template name="splunk[template]"
    description="]a human readable description]"
    id="com.splunk.project.java.templates.[template]"
    context="[one of java, java-members, or java-statements]"
    enabled="true"
    autoinsert="true">[exact code to insert,
    with no trailing newlines at the end]</template>
-->

<template name="splconnect" 
    description="connect to a Splunk instance" 
    id="com.splunk.project.java.templates.service"
    context="java"
    enabled="true" 
    autoinsert="true">${:import(com.splunk.Service,com.splunk.ServiceArgs)}// Create login parameters. We suggest finding
// a better way to store these than hard coding
// them in your program for production code.
ServiceArgs serviceArgs = new ServiceArgs();
serviceArgs.setUsername(${username});
serviceArgs.setPassword(${password});
serviceArgs.setHost(${host});
serviceArgs.setPort(${port});

// Create a Service instance and log in with the argument map
Service service = Service.connect(serviceArgs);</template>


<template name="spllistsavedsearches"
    description="iterate over saved searches"
    id="com.splunk.project.java.templates.listsavedsearches"
    context="java"
    enabled="true"
    autoinsert="true">${:import(com.splunk.SavedSearch)}for (SavedSearch savedSearch : service.getSavedSearches().values()) {
    ${cursor}
}</template>  


<template name="spllistjobs"
    description="iterate over jobs"
    id="com.splunk.project.java.templates.listjobs"
    context="java"
    enabled="true"
    autoinsert="true">${:import(com.splunk.Job)}for (Job job : service.getJobs().values()) {
    ${cursor}
}</template>


<template name="spllistusers"
    description="iterate over users"
    id="com.splunk.project.java.templates.listusers"
    context="java"
    enabled="true"
    autoinsert="true">${:import(com.splunk.Args,com.splunk.User)}for (User user : service.getUsers().values()) {
    // TODO Autogenerated loop body
    for (String roleName : user.getRoles()) {
         ${cursor}
    }
}</template>


<template name="spllistroles"
    description="iterate over roles"
    id="com.splunk.project.java.templates.listroles"
    context="java"
    enabled="true"
    autoinsert="true">${:import(com.splunk.Role)}for (Role role : service.getRoles().values()) {
    // TODO Autogenerated loop body
    for (String capabilityName : role.getCapabilities()) {
        ${cursor}
    }
}</template>


<template name="splnewsavedsearch"
    description="create a saved search"
    id="com.splunk.project.java.templates.newsavedsearch"
    context="java"
    enabled="true"
    autoinsert="true">${:import(com.splunk.SavedSearch,com.splunk.Args)}Args savedSearchArgs = new Args();
// For a full list of options, see:
//
//     http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#POST_saved.2Fsearches

// savedSearchArgs.put("description", "Human readable description of this saved search");
// savedSearchArgs.put("is_scheduled", savedSearch.setIsScheduled(true); 
// savedSearchArgs.put("cron_schedule", "*/5 * * * *"); 

SavedSearch savedSearch = service.getSavedSearches().create(
    ${savedSearchName},
    ${searchQuery},
    savedSearchArgs
);</template>  


<template name="spldispatch"
    description="get a job from a saved search"
    id="com.splunk.project.java.templates.savedsearchjob"
    context="java"
    enabled="true"
    autoinsert="true">${:import(com.splunk.SavedSearch,com.splunk.Job,com.splunk.SavedSearchDispatchArgs)}// Retrieve the saved search to get a job from.
SavedSearch savedSearch = service.getSavedSearches().get(${nameOfSavedSearch});

// savedSearchJob will contain the job we fetch.
Job savedSearchJob = null;

Job[] savedSearchJobHistory = savedSearch.history();
if (savedSearchJobHistory.length > 0) {
    // Fetch the last existing job from the saved search
    savedSearchJob = savedSearchJobHistory[0];
} else {
    // No jobs exist. Dispatch a new one.
    SavedSearchDispatchArgs dispatchArgs = new SavedSearchDispatchArgs();

    // Set arguments for the dispatch methods. See
    //
    //    http://docs.splunk.com/DocumentationStatic/JavaSDK/1.1/com/splunk/SavedSearchDispatchArgs.html
    //
    // for a list of all the setters.

    ${cursor}// dispatchArgs.setDispatchEarliestTime("-20m@m");
    // dispatchArgs.setDispatchLatestTime("now");

    try {
        savedSearchJob = savedSearch.dispatch(dispatchArgs);
    } catch (InterruptedException e) {
        // TODO Auto-generated body
        e.printStackTrace();
    }
}</template>


<template name="splresults"
    description="Iterate over search results with pagination"
    id="com.splunk.project.java.templates.foreachresult"
    context="java"
    enabled="true"
    autoinsert="true">${:import(com.splunk.CollectionArgs,
          java.io.InputStream,
          com.splunk.ResultsReaderXml,
          com.splunk.Event)}// Wait for the job to finish
while (!job.isDone()) {
    Thread.sleep(500);
}

int totalResults = job.getResultCount();
int eventsPerPage = 1000;
CollectionArgs outputArgs = new CollectionArgs();
outputArgs.setCount(totalResults);

for (int offset = 0; offset &lt; totalResults; offset += eventsPerPage) {
    outputArgs.setOffset(offset);

    // Get the search results and display them
    InputStream results = job.getResults(outputArgs);
    ResultsReaderXml resultsReader = new ResultsReaderXml(results);
    Event event;
   
    while ((event = resultsReader.getNextEvent()) != null) {
        // Process event    
        ${cursor}// for (String key : event.keySet()) {
        //       System.out.println(key + ": " + event.get(key));
        // }
    }    
 
   resultsReader.close();
}</template>


<template name="sploneshot"
    description="iterate over results of a oneshot search"
    id="com.splunk.project.java.templates.oneshot"
    context="java"
    enabled="true"
    autoinsert="true">${:import(com.splunk.Args,com.splunk.ResultsReaderXml,java.io.InputStream,com.splunk.Event,java.io.IOException)}// Set the parameters for the search
Args oneshotSearchArgs = new Args(); 
// For a full list of options, see:
//
//     http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#POST_search.2Fjobs

// oneshotSearchArgs.put("earliest_time", "now-1w");
// oneshotSearchArgs.put("latest_time",   "now");

InputStream resultsStream =  service.oneshotSearch(
    ${searchQuery},
    oneshotSearchArgs
);

try {
    ResultsReaderXml resultsReader = new ResultsReaderXml(resultsStream);

    for (Event event : resultsReader) {
        // Process each event
        ${cursor}for (String key: event.keySet()) {
           System.out.println(key + ": " + event.get(key));
        }
    }

    resultsReader.close();
} catch (IOException e) {
    // TODO Autogenerated code stub
    e.printStackTrace();
}</template>


<template name="splrealtime"
    description="iterate over results from a realtime search"
    id="com.splunk.project.java.templates.realtime"
    context="java"
    enabled="true"
    autoinsert="true">${:import(com.splunk.JobArgs,
          com.splunk.Job,
          com.splunk.JobResultsPreviewArgs,
          java.io.InputStream,
          com.splunk.ResultsReaderXml,
          com.splunk.Event)}// Create an argument map for the job arguments:
JobArgs jobArgs = new JobArgs();
jobArgs.setExecutionMode(JobArgs.ExecutionMode.NORMAL);
jobArgs.setSearchMode(JobArgs.SearchMode.REALTIME);
jobArgs.setEarliestTime("rt-1m");
jobArgs.setLatestTime("rt");
jobArgs.setStatusBuckets(300); // Enable timeline

// Create the job
Job job = service.search(${searchQuery}, jobArgs);

// Wait for the job to be ready
while (!job.isReady()) {
    Thread.sleep(500);
}

// View the results--a stream of previews--using standard Java classes
JobResultsPreviewArgs previewArgs = new JobResultsPreviewArgs();
previewArgs.setCount(${numberOfEventsToFetch});

while (true) {
    InputStream stream = job.getResultsPreview(previewArgs);

    try {
        ResultsReaderXml resultsReader = new ResultsReaderXml(stream);

        for (Event event : resultsReader) {
              // Process each event
            ${cursor}for (String key: event.keySet()) {
               System.out.println(key + ": " + event.get(key));
            }
        }

        resultsReader.close();
    } catch (IOException e) {
        // TODO Autogenerated code stub
        e.printStackTrace();
    }

    stream.close();
    Thread.sleep(2000);
}</template>


<template name="spljob"
    description="create a search job"
    id="com.splunk.project.java.templates.job"
    context="java"
    enabled="true"
    autoinsert="true">${:import(com.splunk.Job,
          com.splunk.JobArgs)}JobArgs jobArgs = new JobArgs();
// Set job options. See 
//
//     http://docs.splunk.com/DocumentationStatic/JavaSDK/1.1/com/splunk/JobArgs.html
//
// for a list of available setters.

// jobArgs.setEarliestTime("-24h@h");
// jobArgs.setLatestTime("now");
// jobArgs.setStatusBuckets(300); // Enable timeline

Job job = service.getJobs().create(${searchQuery}, jobArgs);

while (!job.isReady()) {
    try {
        Thread.sleep(500);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
}

// TODO Anything to be done after the job has begun.

while (!job.isDone()) {
    try {
        Thread.sleep(500);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
}

${cursor}// TODO Anything to be done after the job has finished.
</template>


<template name="splwritetcp"
    description="write data to a Splunk TCP input"
    id="com.splunk.project.java.templates.writetcp"
    context="java"
    enabled="true"
    autoinsert="true">${:import(com.splunk.TcpInput,
          java.io.OutputStream,
          com.splunk.ReceiverBehavior,
          java.text.DateFormat,
          java.text.SimpleDateFormat,
          java.util.Date)}TcpInput input = (TcpInput)service.getInputs().get("${port}");

input.attachWith(new ReceiverBehavior() {
    public void run(OutputStream stream) throws IOException {
        // Create a timestamp
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd-HH:mm:ss");
        String date = dateFormat.format(new Date());
        String eventText = date + " ${message}\r\n";
        stream.write(eventText.getBytes("UTF8"));
     }
});</template>


<template name="splwritestream"
    description="write data to a Splunk index via the REST API"
    id="com.splunk.project.java.templates.writestream"
    context="java"
    enabled="true"
    autoinsert="true">${:import(com.splunk.Index,
          java.io.OutputStream,
          com.splunk.ReceiverBehavior,
          java.text.DateFormat,
          java.text.SimpleDateFormat,
          java.util.Date)}Index index = service.getIndexes().get(${indexName});

index.attachWith(new ReceiverBehavior() {
     public void run(OutputStream stream) throws IOException {
         DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd-HH:mm:ss");
         String date = dateFormat.format(new Date());
         String eventText = date + " ${message}\r\n";
         stream.write(eventText.getBytes("UTF8"));
     }
});</template>


<template name="splexport"
    description="run exporting search"
    id="com.splunk.project.java.templates.export"
    context="java"
    enabled="true"
    autoinsert="true">${:import(com.splunk.JobExportArgs,
          java.io.InputStream,
          com.splunk.MultiResultsReaderXml,
          com.splunk.Event,
          com.splunk.SearchResults)}JobExportArgs exportArgs = new JobExportArgs();
// Set arguments...
// exportArgs.setEarliestTime("-1h@h");
// exportArgs.setLatestTime("now");

InputStream resultsStream = ${service:var(com.splunk.Service)}.export(${searchQuery}, exportArgs);

// Display results using the SDK's multi-results reader for XML 
MultiResultsReaderXml reader = new MultiResultsReaderXml(resultsStream);

for (SearchResults searchResults : reader) {
    for (Event event : searchResults) {
        // Process event
        ${cursor}for (String key: event.keySet()) {
            System.out.println(key + ": " + event.get(key));
        }
    }
}

reader.close();</template>

<!-- CIM logging templates -->
<template name="spogdebug"
     description="log a structured debug message"
     id="com.splunk.project.java.templates.cimdebug"
     context="java"
     enabled="true"
     autoinsert="true">${:import(com.splunk.logging.SplunkLogEvent)}logger.debug(new SplunkLogEvent(${eventName}, ${eventId}) {{
    // TODO Auto-generated body
     addPair(${key}, ${value});
}}.toString());</template>

<template name="spogerror"
     description="log a structured error message"
     id="com.splunk.project.java.templates.cimerror"
     context="java"
     enabled="true"
     autoinsert="true">${:import(com.splunk.logging.SplunkLogEvent)}logger.error(new SplunkLogEvent(${eventName}, ${eventId}) {{
    // TODO Auto-generated body
     addPair(${key}, ${value});
}}.toString());</template>
    
<template name="spoginfo"
     description="log a structured info message"
     id="com.splunk.project.java.templates.ciminfo"
     context="java"
     enabled="true"
     autoinsert="true">${:import(com.splunk.logging.SplunkLogEvent)}logger.info(new SplunkLogEvent(${eventName}, ${eventId}) {{
    // TODO Auto-generated body
     addPair(${key}, ${value});
}}.toString());</template>    

<template name="spogtrace"
     description="log a structured trace message"
     id="com.splunk.project.java.templates.cimtrace"
     context="java"
     enabled="true"
     autoinsert="true">${:import(com.splunk.logging.SplunkLogEvent)}logger.trace(new SplunkLogEvent(${eventName}, ${eventId}) {{
    // TODO Auto-generated body
     addPair(${key}, ${value});
}}.toString());</template>
    
<template name="spogwarn"
     description="log a structured warn message"
     id="com.splunk.project.java.templates.cimwarn"
     context="java"
     enabled="true"
     autoinsert="true">${:import(com.splunk.logging.SplunkLogEvent)}logger.warn(new SplunkLogEvent(${eventName}, ${eventId}) {{
    // TODO Auto-generated body
     addPair(${key}, ${value});
}}.toString());</template>

<!-- Time span templates for SearchJobArgs -->
<template name="time15m"
     description="time range: last 15 minutes"
     id="com.splunk.project.java.templates.time15m"
     context="java"
     enabled="true"
     autoinsert="true">${:import(com.splunk.JobArgs)}JobArgs jobArgs = new JobArgs();
jobArgs.setEarliestTime("-15m@m");
jobArgs.setLatestTime("now");
</template>

<template name="time60m"
     description="time range: last hour"
     id="com.splunk.project.java.templates.time60m"
     context="java"
     enabled="true"
     autoinsert="true">${:import(com.splunk.JobArgs)}JobArgs jobArgs = new JobArgs();
jobArgs.setEarliestTime("-60m@m");
jobArgs.setLatestTime("now");
</template>

<template name="time4h"
     description="time range: last 4 hours"
     id="com.splunk.project.java.templates.time4h"
     context="java"
     enabled="true"
     autoinsert="true">${:import(com.splunk.JobArgs)}JobArgs jobArgs = new JobArgs();
jobArgs.setEarliestTime("-4h@h");
jobArgs.setLatestTime("now");
</template>

<template name="time24h"
     description="time range: last 24 hours"
     id="com.splunk.project.java.templates.time24h"
     context="java"
     enabled="true"
     autoinsert="true">${:import(com.splunk.JobArgs)}JobArgs jobArgs = new JobArgs();
jobArgs.setEarliestTime("-24h@h");
jobArgs.setLatestTime("now");
</template>  

<template name="newargument"
          description="new modular input argument"
          id="com.splunk.project.java.templates.newargument"
          context="java"
          enabled="true"
          autoinsert="true">Argument ${name} = new Argument("${name}");
        ${name}.setDataType(Argument.DataType.STRING);
        ${name}.setDescription("${description}");
        ${name}.setRequiredOnCreate(true);
        ${name}.setRequiredOnEdit(true);
        scheme.addArgument(${name});    
</template>   

</templates>
